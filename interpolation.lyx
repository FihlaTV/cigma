#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\newcommand{\mynote}[1]{}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
mynote{
\end_layout

\begin_layout Plain Layout

TODO:
\end_layout

\begin_layout Plain Layout

  * Move discussion from error_analysis.lyx and running.lyx here (done)
\end_layout

\begin_layout Plain Layout

  * Rename document to interpolation.lyx (done)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Note that we place the interpolation chapter before the integration chapter
 because we wish to define the isoparametric elements in here (interpolation.lyx)
, and simply refer back to them in integration.lyx (for listing the integration
 rules)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Random Notes: 
\end_layout

\begin_layout Plain Layout

For parametrizing the predefined functions we would need to use boost::regex
 when initializing the function from a user specified source string
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Give list of predefined functions here
\end_layout

\begin_layout Plain Layout

  - basic:
\end_layout

\begin_layout Plain Layout

     * zero
\end_layout

\begin_layout Plain Layout

     * scalar.one
\end_layout

\begin_layout Plain Layout

  - benchmarks:
\end_layout

\begin_layout Plain Layout

     * strikeslip.okada.disloc3d
\end_layout

\begin_layout Plain Layout

     * cylinder_extension.{maxwell,non_newtonian}.{displacement,velocity,stress}
\end_layout

\begin_layout Plain Layout

     * cylinder_relaxation.{maxwell,non_newtonian}.{displacement,velocity,stress}
\end_layout

\begin_layout Plain Layout

     * circular_inclusion.pressure
\end_layout

\begin_layout Plain Layout

     * test.{cube,sphere,square,circle}
\end_layout

\begin_layout Plain Layout

  - Explain what is needed to define own function
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Important things to discuss:
\end_layout

\begin_layout Plain Layout

  - Natural coordinates
\end_layout

\begin_layout Plain Layout

  - Restricting discussion to isoparametric elements
\end_layout

\begin_layout Plain Layout

  - Available elements: tet4, tet10, hex8, hex20, hex27, tri3, quad4
\end_layout

\begin_layout Plain Layout

  - Node orderings for each element type (use figures to illustrate)
\end_layout

\begin_layout Plain Layout

  - Shape functions
\end_layout

\begin_layout Plain Layout

  - Shape function derivatives
\end_layout

\begin_layout Plain Layout

  - Calculation of Jacobian
\end_layout

\begin_layout Plain Layout

  - Calculation of Volumes
\end_layout

\begin_layout Plain Layout

  - Deciding if a given point is contained in element
\end_layout

\begin_layout Plain Layout

  - Default integration rule for each element type
\end_layout

\begin_layout Plain Layout

  - Mesh Locator for finding element given an arbitrary point -- returns
 list of likely elements
\end_layout

\begin_layout Plain Layout

  - Deciding if a given global point is contained in element (need inverse
 reference map)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Interpolation Functions
\end_layout

\begin_layout Standard
As noted in Chapter 3, we will often need to evaluate a function 
\begin_inset Formula $f(\vec{x})$
\end_inset

 at arbitrary points on a global coordinate system.
\end_layout

\begin_layout Section
Local Functions
\end_layout

\begin_layout Standard
Typically, as a result of numerical simulations, your function will be defined
 locally on a discretization of the domain of interest.
 Each discretization element defines a local coordinate system.
 Since the integration points are defined on a global coordinate system,
 we might have to invert the appropriate reference map after running a search
 through each discretization cell, followed by a newton-iteration to convert
 into the local coordinates, followed by an interior test.
 (XXX: Insert workfile1.lyx in this section)
\end_layout

\begin_layout Subsection
Domain Discretization
\end_layout

\begin_layout Standard
A typical discretization will partition the domain of interest into a large
 number of cells.
 
\end_layout

\begin_layout Standard
A set of cells which partition the domain.
 These cells are defined geometrically by a number of node points, which
 together with a set of connectivity rules.
 This set of node points will have a number of degrees of freedom associated
 with them.
 An interpolation
\end_layout

\begin_layout Subsection
Interpolation Step
\end_layout

\begin_layout Standard
Once we arrive at a solution on a cell 
\begin_inset Formula $\Omega_{e}$
\end_inset

, we can define an interpolant function that will give us the value of our
 function on any point in the interior of the cell.
\end_layout

\begin_layout Subsection
Available Elements
\end_layout

\begin_layout Subsection
Triangles and Tetrahedra
\end_layout

\begin_layout Subsection
Quadrilateral and Hexahedral Elements
\end_layout

\begin_layout Section
Global Functions
\end_layout

\begin_layout Standard
These functions are given explicitly on a domain.
 They may be defined explicitly, in the source code, or may also be defined
 by a global set of basis functions (such as spherical harmonics).
 Either way, they will be associated with a callback function that Cigma
 will evaluate whenever necessary.
\end_layout

\begin_layout Subsection
Available Global Functions
\end_layout

\begin_layout Standard
By default, we compile a number of functions into Cigma.
 We subdivide these into three categories.
 The first class contains only two functions, zero and one.
 The second class of functions consists of test functions intended to verify
 the operation of Cigma.
 Finally, the third class of functions consists of example benchmark cases
 that you may use as a base for defining your own functions.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

There are two basic functions that are available, listed in the table below.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
zero
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Always evaluates to 0.
 Compatible with scalar, vector, and tensor functions.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
one
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Always evaluates to 1.
 Only compatible with scalar functions.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The following functions have short definitions and are available for internal
 testing purposes.
 Mainly, these are used to make sure Cigma returns consistent results 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
test.cube
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scalar field in 3-dimensions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
test.sphere
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector field in 3-dimensions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
test.square
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scalar field in 2-dimensions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
test.circle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector field in 2-dimensions
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

We can also calculate the initial step of the strike-slip benchmark (no
 gravity) discussed in Chapter X.
 This is based on the Okada (1992) dislocation code[?].
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features>
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
strikeslip.disloc3d.displacement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
strikeslip.disloc3d.velocity
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
strikeslip.disloc3d.stress
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The full list of all pre-defined functions which are available by name are
 given in the appendix.
\end_layout

\begin_layout Subsection
Defining Your Own Global Function
\end_layout

\begin_layout Standard
There are three things you need to do in order to register a new function.
 These are the steps you need to follow in order to let Cigma know about
 your function.
\end_layout

\begin_layout Enumerate
Drop the definition of your global function in a subdirectory of the 
\family typewriter
src/core/functions/
\family default
 directory, and define an appropriate subclass of 
\family typewriter
cigma::Function
\family default
 which interfaces to your function.
\end_layout

\begin_layout Enumerate
Add the new source and header files into the 
\family typewriter
libcigma_a_SOURCES
\family default
 variable in 
\family typewriter
src/Makefile.am
\family default
, following the examples given in the section that refers to the 
\family typewriter
ZeroFunction.h
\family default
 and 
\family typewriter
ZeroFunction.cpp
\family default
 files.
\end_layout

\begin_layout Enumerate
Instantiate your function and insert it into the appropriate map object
 in 
\family typewriter
src/core/functions/FunctionRegistry.cpp
\family default
, again following the examples already in the file.
 It is in this file where you will give a unique name to your function,
 for use in the command line.
\end_layout

\begin_layout Standard
Other examples to examine are located at 
\family typewriter
TestFunctions.cpp
\family default
 and in 
\family typewriter
StrikeslipFunctions.cpp
\family default
 in the 
\family typewriter
src/core/functions/
\family default
 directory.
\end_layout

\end_body
\end_document
