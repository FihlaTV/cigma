#LyX 1.5.1 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{hyperref}

\let\myUrl\url
\renewcommand{\url}[1]{(\myUrl{#1})}

\newcommand{\mynote}[1]{}
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Cigma
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
raggedbottom
\end_layout

\end_inset


\end_layout

\begin_layout Part
Workfile 2: EXODUS II: A Finite Element Data Model
\end_layout

\begin_layout Chapter
Development of EXODUS II
\end_layout

\begin_layout Section
3.4 Nodal Coordinates
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_coord, ex_get_coord; EXPCOR, EXGCOR
\end_layout

\begin_layout Standard
The nodal coordinates are the floating point spatial coordinates of all
 the nodes in the model.
 The number of nodes and the problem dimension defne the length of this
 array.
 The mode index cycles faster than the dimension index, thus the X coordinates
 for all the nodes is written before any Y coordinate data are written.
 Internal node numbers (beginning with 1) are implied from a node's place
 in the nodal coordinates record.
 See Section 3.5 for a discussion of internal node numbers.
 
\end_layout

\begin_layout Subsection
3.4.1 Coordinate Names
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_coord_names, ex_get_coord_names; EXPCON, EXGCON
\end_layout

\begin_layout Standard
The coordinate names are character strings of length 
\family typewriter
MAX_STR_LENGTH
\family default
 (
\family typewriter
MXSTLN
\family default
 in Fortran) which name the spatial coodinates.
 There is one string for each dimension in the model, thus there are one
 to three strings.
\end_layout

\begin_layout Section
3.5 Node Number Map
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_node_num_map, ex_get_node_num_map; EXPNNM, EXGNNM
\end_layout

\begin_layout Standard
Within the data model, internal node IDs are indices into the nodal coordinate
 array and internal element IDs are indices into the element connectivity
 array.
 Thus, internal node and element numbers (IDs) are contiguous (i.e., 1 .
 .
 .
 
\family typewriter
number_of_nodes
\family default
 and 1 .
 .
 .
 
\family typewriter
number_of_elements
\family default
, respectively).
 Optional node and element number maps can be stored to relate user-defined
 node and element IDs to these internal node and element numbers.
 The length of these maps are 
\family typewriter
number_of_nodes
\family default
 and 
\family typewriter
number_of_elements
\family default
, respectively.
 As an example, suppose a database contains exactly one QUAD element with
 four nodes.
 The user desires the element ID to be 100 and the node IDs to be 10, 20,
 30, and 40 as shown in Figure 1.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:1"

\end_inset

User-defined Node and Element IDs
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/sue/cigma/figures/element-IDs.png

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The internal data structures representing the above model would be the following
: 
\end_layout

\begin_layout Itemize

\family typewriter
nodal coordinate array
\family default
: (0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)
\end_layout

\begin_layout Itemize

\family typewriter
connectivity array
\family default
: (1, 2, 3, 4) 
\end_layout

\begin_layout Itemize

\family typewriter
node number map
\family default
: (10, 20, 30, 40) 
\end_layout

\begin_layout Itemize

\family typewriter
element number map
\family default
: (100) 
\end_layout

\begin_layout Standard
Internal (contiguously numbered) node and element IDs must be used for all
 data structures that contain node or element numbers (IDs), including node
 set node lists, side set element lists, and element connectivity.
 Additionally, to inquire the value(s) of node or element results variables,
 an application code must pass the internal node or element number for the
 node or element of interest.
 
\end_layout

\begin_layout Section
3.6 Element Number Map 
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_elem_num_map, ex_get_elem_num_map, EXPENM, EXGENM
\family default
 
\end_layout

\begin_layout Standard
Refer to Section 3.5 for a discussion of the optional element number map.
 
\end_layout

\begin_layout Section
3.7 Optimized Element Order Map 
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_map, ex_get_map; EXPMAP, EXGMAP 
\end_layout

\begin_layout Standard
The optional element order map defines the element order in which a solver
 (e.g., a wavefront solver) should process the elements.
 For example, the first entry is the number of the element which should
 be processed first by the solver.
 The length of this map is the total number of elements in the model.
 
\end_layout

\begin_layout Section
3.8 Element Blocks 
\end_layout

\begin_layout Standard
For efficient storage and to minimize I/O, elements are grouped into element
 blocks.
 Within an element block, all elements are of the same type (basic geometry
 and number of nodes).
 This definition does not preclude multiple element blocks containing the
 same element type (i.e., “QUAD” elements may be in more than one element
 block); only that each element block may contain only one element type.
 
\end_layout

\begin_layout Standard
The internal number of an element is defined implicitly by the order in
 which it appears in the file.
 Elements are numbered internally (beginning with 1) consecutively across
 all element blocks.
 See Section 3.5 for a discussion of internal element numbering.
 
\end_layout

\begin_layout Subsection
3.8.1 Element Block Parameters 
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_elem_block, ex_get_elem_block, ex_get_elem_blk_ids; EXPELB, EXGELB,
 EXGEBI 
\end_layout

\begin_layout Standard
The following parameters are defined for each element block: 
\end_layout

\begin_layout Itemize
Element block ID -- an arbitrary, unique, positive integer which identifies
 the particular element block.
 This ID is used as a “handle” into the database that allows users to specify
 a group of elements to the application code without having to know the
 order in which element blocks are stored in the file.
\end_layout

\begin_layout Itemize
Element type -- a character string of length MAX_STR_LENGTH (MXSTLN in Fortran)
 to distinguish element types.
 All elements within the element block are of this type.
 Refer to Table 1, “Element Types and Attributes,” on page 9 for a list
 of names that are currently accepted.
 For historical reasons, the names should be all upper case.
 It should be noted that the EXODUS II library routines do not verify element
 type names against a standard list; the interpretation of the element type
 is left to the application codes which read or write the data.
 In general, the first three characters uniquely identify the element type.
 Application codes can append characters to the element type string (up
 to the maximum length allowed) to further classify the element for specific
 purposes.
 
\end_layout

\begin_layout Itemize
Number of elements -- the number of elements in the element block.
 
\end_layout

\begin_layout Itemize
Nodes per element -- the number of nodes per element for the element block.
 
\end_layout

\begin_layout Itemize
Number of attributes -- the number of attributes per element in the element
 block.
 See below for a discussion of element attributes.
 
\end_layout

\begin_layout Subsection
3.8.2 Element Connectivity 
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_elem_conn, ex_get_elem_conn; EXPELC, EXGELC
\family default
 
\end_layout

\begin_layout Standard
The element connectivity contains the list of nodes (internal node IDs;
 see Section 3.5 for a discussion of node IDs) which define each element
 in the element block.
 The length of this list is the product of the number of elements and the
 number of nodes per element as specified in the element block parameters.
 The node index cycles faster than the element index.
 Node ordering follows the conventions illustrated in Figure 4, which includes
 ordering for higher order elements.
 For lower order elements, simply omit the unused nodes.
 These node ordering conventions follow the element topology used in PATRAN
 [5].
 Thus, for higher order elements than those illustrated, use the ordering
 prescribed in the PATRAN User Manual.
 For elements of type CIRCLE or SPHERE, the topology is one node at the
 center of the circle or sphere element.
 
\end_layout

\begin_layout Subsection
3.8.3 Element Attributes 
\end_layout

\begin_layout Standard
API functions: 
\family typewriter
ex_put_elem_attr, ex_get_elem_attr; EXPEAT, EXGEAT 
\end_layout

\begin_layout Standard
Element attributes are optional floating point numbers that can be assigned
 to each element.
 Every element in an element block must have the same number of attributes
 (as specified in the element block parameters) but the attributes may vary
 among elements within the block.
 The length of the attributes array is thus the product of the number of
 attributes per element and the number of elements in the element block.
 Table 1, “Element Types and Attributes,” lists the standard attributes
 for the given element types.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="3in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Element Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attributes
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CIRCLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SPHERE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TRUSS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
A
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
BEAM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2D: 
\begin_inset Formula $\mathrm{A,\, I,\, J}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
3D: 
\begin_inset Formula $\mathrm{A,\,}\mathrm{I_{1},\, I_{2},\, J,\, V_{1},\, V_{2},\, V_{3}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TRIANGLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
QUAD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SHELL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
T
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TETRA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
WEDGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
HEX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Attribute Descriptions
\end_layout

\begin_layout Standard
A -- cross-sectional area.
 
\end_layout

\begin_layout Standard
Vi -- a vector that, together with the axis of the element defines a plane
 for the beam element; I1 bending moment of inertia affects displacements
 in this plane; I2 bending moment of inertia affects bending out of this
 plane.
 
\end_layout

\begin_layout Standard
J -- torsional (polar) moment of inertia.
 
\end_layout

\begin_layout Standard
T -- thickness 
\end_layout

\begin_layout Standard
R -- radius
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Node-Ordering-for"

\end_inset

Node Ordering for Standard Element Types
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/node-ordering-for-standard-ele-types.png

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\end_body
\end_document
