#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\newcommand{\mynote}[1]{}
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
mynote{}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:Running-Cigma"

\end_inset

Running Cigma
\end_layout

\begin_layout Standard
Cigma is primarily designed for calculating error estimates between arbitrary
 fields, so its primary usage is centered on the following operation
\end_layout

\begin_layout LyX-Code
$ 
\series bold
cigma compare 
\emph on
\bar under
field1
\emph default
\bar default
 
\emph on
\bar under
field2
\emph default
\bar default
 -o residuals.vtk
\end_layout

\begin_layout Standard
You will need to provide two datasets describing each of the two fields,
 specify an integration rule and a domain discretization over which to integrate
, although these last two will have reasonable defaults if they are not
 specified.
\end_layout

\begin_layout Standard
The default data storage format for Cigma is the Hierarchical Data Format
 (HDF5), a portable file format developed at the 
\begin_inset LatexCommand htmlurl
name "National Center for Supercomputing Applications (NCSA)"
target "hdf.ncsa.uiuc.edu/HDF5"

\end_inset

.
 The HDF5 is designed for storing multi-dimensional arrays together with
 meta-data in a portable self-describing format.
\end_layout

\begin_layout Section
Command Line Interface
\end_layout

\begin_layout Standard
Cigma is designed to be scriptable.
 Thus, all operations can be specified as command-line arguments given to
 a single executable called 
\family typewriter
cigma
\family default
.
 A set of available commands can be obtained by typing
\end_layout

\begin_layout LyX-Code

\family typewriter
$ 
\family default
\series bold
cigma help
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Usage: cigma <subcommand> [options]
\end_layout

\begin_layout LyX-Code
Type 'cigma help <subcommand>' for help on a specific subcommand.
\end_layout

\begin_layout LyX-Code
Available subcommands
\end_layout

\begin_layout LyX-Code
   help
\end_layout

\begin_layout LyX-Code
   list
\end_layout

\begin_layout LyX-Code
   extract
\end_layout

\begin_layout LyX-Code
   eval
\end_layout

\begin_layout LyX-Code
   compare 
\end_layout

\begin_layout Standard
Examples for each of these commands are given in the sections below.
\end_layout

\begin_layout Section
Input and Output Formats
\end_layout

\begin_layout Standard
The underlying data storage format for Cigma is the HDF5 format, due to
 its flexibility for storing and organizing large amounts of data.
 The Hierarchical Data Format (HDF) is designed for storing, retrieving,
 analyzing, visualizing, and converting scientific data.
 It uses a hierarchical structure that provides users a host of options
 for organizing how their data is stored in HDF5 files.
 Using HDF5 datasets in Cigma allows us to avoid having to convert between
 too many distinct formats.
 Moreover, due to the amount of disk I/O, large finite element meshes can
 be handled more efficiently in binary format.
 
\end_layout

\begin_layout Standard
Another popular format for providing mesh and field inputs.You can easily
 examine the structure of an input file by using the 
\family typewriter
cigma list
\family default
 command, which will simply reveal the names and dimensions of all datasets
 inside the specified file.
\end_layout

\begin_layout Standard
Inputs can be either HDF5 or VTK.
 Specifying the complete path to a dataset consists of the special form
 
\family typewriter
\series bold
filepath:dataset
\family default
\series default
, a colon-delimited pair of file path and dataset path.
\end_layout

\begin_layout Standard
Mesh inputs are currently only unstructured grids.
\end_layout

\begin_layout Standard
Only exception are the residuals, which are written in legacy VTK format
 as scalar cell data over an unstructured grid.
\end_layout

\begin_layout Standard
XXX New section?
\end_layout

\begin_layout Standard
Because Cigma relies on the ability of the user to specify dataset paths,
 we have provided a command called 
\family typewriter
list
\family default
 for viewing the structure of an input file.
 Its usage is very simple.
 
\end_layout

\begin_layout Standard
To view the structure of an HDF5 file:
\end_layout

\begin_layout LyX-Code
$ 
\series bold
cigma list file.h5
\end_layout

\begin_deeper
\begin_layout LyX-Code
/mesh/coordinates           Dataset {119827, 3}
\end_layout

\begin_layout LyX-Code
/mesh/connectivity          Dataset {661929, 4}
\end_layout

\begin_layout LyX-Code
/vars/displacement/step0    Dataset {119827, 3}
\end_layout

\end_deeper
\begin_layout Standard
You can also view the structure of a VTK file with this command:
\end_layout

\begin_layout LyX-Code
$ 
\series bold
cigma list file.vtk
\end_layout

\begin_deeper
\begin_layout LyX-Code
Reading file.vtk
\end_layout

\begin_layout LyX-Code
Points = 119827
\end_layout

\begin_layout LyX-Code
Cells = 661929
\end_layout

\begin_layout LyX-Code
PointDataArray[0] = displacements_t0 (119827 x 3)
\end_layout

\end_deeper
\begin_layout LyX-Code

\end_layout

\begin_layout Section
Cigma Datasets
\end_layout

\begin_layout Standard
A field is a function which assigns a physical quantity to every point in
 a domain 
\begin_inset Formula $\Omega$
\end_inset

.
 This quantity may correspond to a scalar, a vector, or even a tensor.
 As in Chapter 
\begin_inset LatexCommand ref
reference "cha:Error-Analysis"

\end_inset

, we shall use the same discretization 
\begin_inset Formula $\Omega_{e}$
\end_inset

.
 
\end_layout

\begin_layout Standard
A finite element approximation to an solution field 
\begin_inset Formula $\phi(\vec{x})$
\end_inset

 on an element 
\begin_inset Formula $\Omega_{e}$
\end_inset

 is essentially specified by the weighed sum over a fixed set of local shape
 functions 
\begin_inset Formula $\phi_{e,1}(\vec{\xi}),\phi_{e,2}(\vec{\xi}),\ldots,\phi_{e,N}(\vec{\xi})$
\end_inset

 defined on the appropriate reference cell,
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\phi(\vec{x})=\sum_{n=1}^{N}d_{e,n}\phi_{e,n}(\vec{\xi})\]

\end_inset

where the global point 
\begin_inset Formula $\vec{x}\in\Omega_{e}$
\end_inset

 corresponds to the local reference point 
\begin_inset Formula $\vec{\xi}=\vec{x}_{e}^{-1}(\vec{x})\in\hat{\Omega}$
\end_inset

, and the weights 
\begin_inset Formula $d_{e,n}$
\end_inset

, also known as degrees of freedom, are given on each global node.
 These shape functions define a basis for the function space on the finite
 element 
\begin_inset Formula $\Omega_{e}$
\end_inset

.
\end_layout

\begin_layout Standard
For a mesh consisting of a single element type, we need to specify the 
\begin_inset Formula $(x_{n},y_{n},z_{n})$
\end_inset

 of its degrees of freedom, and the connectivity relations 
\begin_inset Formula $\Omega_{e}=\{n_{1},n_{2},\ldots\}$
\end_inset

 among them which define each individual element in the corresponding discretiza
tion.
\end_layout

\begin_layout Standard
The most common element types used in the finite element method are given
 by the following shape functions, which define the interior of a tetrahedron
 with vertices at 
\begin_inset Formula $a=(0,0,0)$
\end_inset

, 
\begin_inset Formula $b=(1,0,0)$
\end_inset

, 
\begin_inset Formula $c=(0,1,0)$
\end_inset

, 
\begin_inset Formula $d=(0,0,1)$
\end_inset

, 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "b"
use_parbox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
N_{a} & = & \frac{1}{2}(-1-x-y-z)\\
N_{b} & = & \frac{1}{2}(1+x)\\
N_{c} & = & \frac{1}{2}(1+y)\\
N_{d} & = & \frac{1}{2}(1+z)\end{eqnarray*}

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Standard
\begin_inset Graphics
	filename ../../figures/reference-tet4.png
	width 5cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Reference Tetrahedron
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Likewise, a hexahedral element with vertices located at 
\begin_inset Formula $a=(-1,-1,-1)$
\end_inset

, 
\begin_inset Formula $b=(1,-1,-1)$
\end_inset

, 
\begin_inset Formula $c=(1,1,-1)$
\end_inset

, 
\begin_inset Formula $d=(-1,1,-1)$
\end_inset

, 
\begin_inset Formula $e=(-1,-1,1)$
\end_inset

, 
\begin_inset Formula $f=(1,-1,1)$
\end_inset

, 
\begin_inset Formula $g=(1,1,1)$
\end_inset

, 
\begin_inset Formula $h=(-1,1,1)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Standard
\begin_inset Graphics
	filename ../../figures/reference-hex8.png
	width 5cm

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
N_{a} & = & \frac{1}{8}\left(1-x\right)\left(1-y\right)\left(1-z\right)\\
N_{b} & = & \frac{1}{8}\left(1+x\right)\left(1-y\right)\left(1-z\right)\\
N_{c} & = & \frac{1}{8}\left(1-x\right)\left(1+y\right)\left(1-z\right)\\
N_{d} & = & \frac{1}{8}\left(1+x\right)\left(1+y\right)\left(1-z\right)\\
N_{e} & = & \frac{1}{8}\left(1-x\right)\left(1-y\right)\left(1+z\right)\\
N_{f} & = & \frac{1}{8}\left(1+x\right)\left(1-y\right)\left(1+z\right)\\
N_{g} & = & \frac{1}{8}\left(1-x\right)\left(1+y\right)\left(1+z\right)\\
N_{h} & = & \frac{1}{8}\left(1+x\right)\left(1+y\right)\left(1+z\right)\end{eqnarray*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Reference Hexahedron
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
XXX: Take description of higher order elements from Karniadakis book
\end_layout

\begin_layout Subsection
Comparing Two Finite Element Fields
\end_layout

\begin_layout Standard
Comparing two arbitrary finite element fields can be accomplished with the
 
\family typewriter
cigma compare
\family default
 command-line utility.
 By default, the comparison will involve a numerical integration over each
 of the elements in the mesh associated with the first field.
 If this discretization is inadequate, you may also specify an alternative
 discretization over which to perform the integration.
 The comparison operation will output the local residual values are into
 the specified output file.
\end_layout

\begin_layout Standard
A basic comparison can be as simple as specifying the following arguments:
\end_layout

\begin_layout LyX-Code
cigma compare --first=field1.h5:/field1/stepN
\end_layout

\begin_layout LyX-Code

\series bold
 
\series default
             --second=field2.h5:/field2/stepN
\end_layout

\begin_layout LyX-Code
              --output=residuals.vtk
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Comparing against Known Values
\end_layout

\begin_layout Standard
A finite element description might not always be available for one of the
 fields.
 However, you can break the comparison into several steps if you have a
 means to compute that field on any of the required points.
\end_layout

\begin_layout Standard
First, extract the global coordinates of the integration points.
 This will result in an explicit list of points over which to evaluate your
 field.
\end_layout

\begin_layout LyX-Code
cigma extract field1.h5:/model/mesh/ -o points.h5:/projected_points
\end_layout

\begin_layout Standard
Now you can evaluate your function at the designated points.
 You can provide the path to the explicit set of values with
\end_layout

\begin_layout LyX-Code
cigma compare --first=field1.h5:/field1/stepN
\end_layout

\begin_layout LyX-Code
              --second-points=points.h5:/projected_points
\end_layout

\begin_layout LyX-Code
              --second-values=values.h5:/projected_values
\end_layout

\begin_layout LyX-Code
              --output=residuals.vtk
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Comparing-against-a"

\end_inset

Comparing against a Known Function
\end_layout

\begin_layout Standard
If one of your fields is easily described by an analytic expression, then
 you also have the option to compile your analytic function as a builtin
 Cigma function.
 This will enable you to reference your function by name when using the
 
\family typewriter
compare
\family default
 command.
 For example,
\end_layout

\begin_layout LyX-Code
cigma compare --first=field1.h5:/vars/displacement/step0
\end_layout

\begin_layout LyX-Code

\series bold
 
\series default
             --second=
\bar under
disloc3d
\end_layout

\begin_layout LyX-Code
              --output=residuals.vtk
\end_layout

\begin_layout Standard
You may also interact with your analytic function by using the 
\family typewriter
cigma
\family default
 
\family typewriter
eval
\family default
 command, and obtain a set of values which may then be passed back to the
 
\family typewriter
compare
\family default
 command.
 
\end_layout

\begin_layout LyX-Code
cigma eval --function=
\bar under
disloc3d
\end_layout

\begin_layout LyX-Code
           --points=points.h5:/projected_points
\end_layout

\begin_layout LyX-Code
           --values=values.h5:/disloc3d_values
\end_layout

\begin_layout Standard
Once these values have been obtained, we can use it to resume the calculation
 of 
\end_layout

\begin_layout LyX-Code
cigma compare --output=residuals.vtk
\end_layout

\begin_layout LyX-Code
              --first=field1.h5:/vars/displacement/step0
\end_layout

\begin_layout LyX-Code
              --second-points=points.h5:/projected_points
\end_layout

\begin_layout LyX-Code
              --second-values=values.h5:/disloc3d_values
\end_layout

\begin_layout Standard
Another built-in function you might find useful is the 
\family typewriter
\bar under
zero
\family default
\bar default
 function, which is defined to return 0 everywhere.
 You can use this function for estimating the norm of your field.
\end_layout

\begin_layout Subsection
Specifying a Integration Mesh
\end_layout

\begin_layout Standard
To override the mesh used in the integration, you can specify an extra argument
 providing the location of the mesh,
\end_layout

\begin_layout LyX-Code
cigma compare [...]
\end_layout

\begin_layout LyX-Code
  --quadrature-mesh=mesh.h5:/model/mesh/
\end_layout

\begin_layout Standard
Alternatively, you can also specify the coordinates and connectivity arrays
 separately, in case they reside in separate files.
\end_layout

\begin_layout LyX-Code
cigma compare [...]
\end_layout

\begin_layout LyX-Code
  --quadrature-mesh-coordinates=file1.h5:/model/mesh/coordinates
\end_layout

\begin_layout LyX-Code
  --quadrature-mesh-connectivity=file2.h5:/model/mesh/connectivity
\end_layout

\begin_layout Subsection
Specifying a Quadrature Rule
\end_layout

\begin_layout Standard
To specify a quadrature rule, you will have to provide the quadrature weights
 and points in the appropriate reference element.
 This can be done with the following additional argument:
\end_layout

\begin_layout LyX-Code
cigma compare [...]
\end_layout

\begin_layout LyX-Code
  --quadrature-rule=quadrature-rules.h5:/path/to/rule
\end_layout

\begin_layout Standard
You may also specify the location of the points and weights separately:
\end_layout

\begin_layout LyX-Code
cigma compare [...]
\end_layout

\begin_layout LyX-Code
  --quadrature-rule-points=file.h5:/path/to/rule/points
\end_layout

\begin_layout LyX-Code
  --quadrature-rule-weights=file.h5:/path/to/rule/weights
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
In the 
\family typewriter
src/
\family default
 directory of the Cigma distribution, you can find a Python script called
 
\family typewriter
rules.py
\family default
 that uses FIAT for calculating an appropriate set of quadrature rules for
 use in Cigma.
\end_layout

\end_body
\end_document
